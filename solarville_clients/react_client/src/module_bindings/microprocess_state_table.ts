// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  EventContextInterface,
  ProductType,
  ProductTypeElement,
  SumType,
  SumTypeVariant,
  TableCache,
  Timestamp,
} from "@clockworklabs/spacetimedb-sdk";

// Import types this type depends on
import { MicroprocessState } from "./microprocess_state_type";

/**
 * Handle for MicroprocessState table
 */
export class MicroprocessStateTableHandle {
  constructor(public table: TableCache<MicroprocessState>) {}

  get onInsert(): ((ctx: any, insertedValue: MicroprocessState) => void) | null {
    return this.table.onInsert;
  }

  set onInsert(callback: ((ctx: any, insertedValue: MicroprocessState) => void) | null) {
    this.table.onInsert = callback;
  }

  get onUpdate(): ((ctx: any, oldValue: MicroprocessState, newValue: MicroprocessState) => void) | null {
    return this.table.onUpdate;
  }

  set onUpdate(callback: ((ctx: any, oldValue: MicroprocessState, newValue: MicroprocessState) => void) | null) {
    this.table.onUpdate = callback;
  }

  get onDelete(): ((ctx: any, deletedValue: MicroprocessState) => void) | null {
    return this.table.onDelete;
  }

  set onDelete(callback: ((ctx: any, deletedValue: MicroprocessState) => void) | null) {
    this.table.onDelete = callback;
  }

  /// Returns an iterator of all rows in this table.
  iter(): IterableIterator<MicroprocessState> {
    return this.table.iter();
  }

  /// Returns the row from this table if the row's primary key equals `pk`.
  state_id(): StateIdIndex {
    return new StateIdIndex(this.table);
  }

  /// Returns the row from this table if the row's primary key equals `pk`.
  code_id(): CodeIdIndex {
    return new CodeIdIndex(this.table);
  }

  /// Returns all rows in this table.
  filter(predicate: (value: MicroprocessState) => boolean): Array<MicroprocessState> {
    return this.table.filter(predicate);
  }

  /// Returns the number of rows in this table.
  count(): number {
    return this.table.count();
  }
}

export class StateIdIndex {
  constructor(public table: TableCache<MicroprocessState>) {}

  /// Returns the row from this table if the row's `state_id` equals the parameter.
  findBy(pk: number): MicroprocessState | undefined {
    return this.table.findBy("state_id", pk);
  }

  /// Returns all rows from this table that match the given `state_id` values.
  findAllBy(pks: number[]): MicroprocessState[] {
    return this.table.findAllBy("state_id", pks);
  }
}

export class CodeIdIndex {
  constructor(public table: TableCache<MicroprocessState>) {}

  /// Returns rows from this table where the `code_id` field equals the parameter.
  findBy(code_id: number): MicroprocessState | undefined {
    return this.table.findBy("code_id", code_id);
  }

  /// Returns rows from this table where the `code_id` field equals any value in the parameter list.
  filter(code_id: number): Array<MicroprocessState> {
    return this.table.filterBy("code_id", code_id);
  }
}
