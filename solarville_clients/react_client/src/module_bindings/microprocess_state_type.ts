// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ProductType,
  ProductTypeElement,
  SumType,
  SumTypeVariant,
  Timestamp,
} from "@clockworklabs/spacetimedb-sdk";

// Import types this type depends on
import { Timestamp as Timestamp_IGNORE } from "@clockworklabs/spacetimedb-sdk";

/**
 * Client-side representation of MicroprocessState table from the server
 */
export class MicroprocessState {
  constructor(
    public state_id: number,
    public code_id: number,
    public left_motor_speed: number,
    public right_motor_speed: number,
    public error_message: string,
    public last_updated: Timestamp,
    public is_running: boolean,
  ) {}

  static getTypeScriptAlgebraicType(): AlgebraicType {
    return new ProductType([
      new ProductTypeElement("state_id", AlgebraicType.createPrimitive("u32")),
      new ProductTypeElement("code_id", AlgebraicType.createPrimitive("u32")),
      new ProductTypeElement("left_motor_speed", AlgebraicType.createPrimitive("f32")),
      new ProductTypeElement("right_motor_speed", AlgebraicType.createPrimitive("f32")),
      new ProductTypeElement("error_message", AlgebraicType.createPrimitive("String")),
      new ProductTypeElement("last_updated", AlgebraicType.createPrimitive("Timestamp")),
      new ProductTypeElement("is_running", AlgebraicType.createPrimitive("Bool")),
    ]);
  }

  static fromAlgebraicValue(value: AlgebraicValue): MicroprocessState {
    const elements = value.getElementsOfProductValue();
    const state_id = elements[0].getValueAsU32();
    const code_id = elements[1].getValueAsU32();
    const left_motor_speed = elements[2].getValueAsF32();
    const right_motor_speed = elements[3].getValueAsF32();
    const error_message = elements[4].getValueAsString();
    const last_updated = elements[5].getValueAsTimestamp();
    const is_running = elements[6].getValueAsBool();
    return new MicroprocessState(
      state_id, 
      code_id, 
      left_motor_speed, 
      right_motor_speed, 
      error_message, 
      last_updated, 
      is_running
    );
  }
}
