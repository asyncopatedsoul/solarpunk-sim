// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  EventContextInterface,
  ProductType,
  ProductTypeElement,
  SumType,
  SumTypeVariant,
  TableCache,
  Timestamp,
} from "@clockworklabs/spacetimedb-sdk";

// Import types this type depends on
import { MicroprocessCode } from "./microprocess_code_type";

/**
 * Handle for MicroprocessCode table
 */
export class MicroprocessCodeTableHandle {
  constructor(public table: TableCache<MicroprocessCode>) {}

  get onInsert(): ((ctx: any, insertedValue: MicroprocessCode) => void) | null {
    return this.table.onInsert;
  }

  set onInsert(callback: ((ctx: any, insertedValue: MicroprocessCode) => void) | null) {
    this.table.onInsert = callback;
  }

  get onUpdate(): ((ctx: any, oldValue: MicroprocessCode, newValue: MicroprocessCode) => void) | null {
    return this.table.onUpdate;
  }

  set onUpdate(callback: ((ctx: any, oldValue: MicroprocessCode, newValue: MicroprocessCode) => void) | null) {
    this.table.onUpdate = callback;
  }

  get onDelete(): ((ctx: any, deletedValue: MicroprocessCode) => void) | null {
    return this.table.onDelete;
  }

  set onDelete(callback: ((ctx: any, deletedValue: MicroprocessCode) => void) | null) {
    this.table.onDelete = callback;
  }

  /// Returns an iterator of all rows in this table.
  iter(): IterableIterator<MicroprocessCode> {
    return this.table.iter();
  }

  /// Returns the row from this table if the row's primary key equals `pk`.
  code_id(): CodeIdIndex {
    return new CodeIdIndex(this.table);
  }

  /// Returns the row from this table if the row's primary key equals `pk`.
  owner_id(): OwnerIdIndex {
    return new OwnerIdIndex(this.table);
  }

  /// Returns all rows in this table.
  filter(predicate: (value: MicroprocessCode) => boolean): Array<MicroprocessCode> {
    return this.table.filter(predicate);
  }

  /// Returns the number of rows in this table.
  count(): number {
    return this.table.count();
  }
}

export class CodeIdIndex {
  constructor(public table: TableCache<MicroprocessCode>) {}

  /// Returns the row from this table if the row's `code_id` equals the parameter.
  findBy(pk: number): MicroprocessCode | undefined {
    return this.table.findBy("code_id", pk);
  }

  /// Returns all rows from this table that match the given `code_id` values.
  findAllBy(pks: number[]): MicroprocessCode[] {
    return this.table.findAllBy("code_id", pks);
  }
}

export class OwnerIdIndex {
  constructor(public table: TableCache<MicroprocessCode>) {}

  /// Returns rows from this table where the `owner_id` field equals the parameter.
  filter(owner_id: number): Array<MicroprocessCode> {
    return this.table.filterBy("owner_id", owner_id);
  }
}
