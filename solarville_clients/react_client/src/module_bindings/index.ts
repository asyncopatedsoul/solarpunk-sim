// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { Connect } from "./connect_reducer.ts";
export { Connect };
import { Disconnect } from "./disconnect_reducer.ts";
export { Disconnect };
import { RegisterPlayer } from "./register_player_reducer.ts";
export { RegisterPlayer };
import { UpdatePlayerPosition } from "./update_player_position_reducer.ts";
export { UpdatePlayerPosition };
import { UpdatePlayerPositions } from "./update_player_positions_reducer.ts";
export { UpdatePlayerPositions };
import { SaveMicroprocessCode } from "./save_microprocess_code_reducer.ts";
export { SaveMicroprocessCode };
import { StartMicroprocess } from "./start_microprocess_reducer.ts";
export { StartMicroprocess };
import { StopMicroprocess } from "./stop_microprocess_reducer.ts";
export { StopMicroprocess };
import { UpdateMicroprocessState } from "./update_microprocess_state_reducer.ts";
export { UpdateMicroprocessState };

// Import and reexport all table handle types
import { LoggedOutPlayerTableHandle } from "./logged_out_player_table.ts";
export { LoggedOutPlayerTableHandle };
import { PlayerTableHandle } from "./player_table.ts";
export { PlayerTableHandle };
import { UpdatePlayerTimerTableHandle } from "./update_player_timer_table.ts";
export { UpdatePlayerTimerTableHandle };
import { WorldConfigTableHandle } from "./world_config_table.ts";
export { WorldConfigTableHandle };
import { MicroprocessCodeTableHandle } from "./microprocess_code_table.ts";
export { MicroprocessCodeTableHandle };
import { MicroprocessStateTableHandle } from "./microprocess_state_table.ts";
export { MicroprocessStateTableHandle };

// Import and reexport all types
import { DbVector3 } from "./db_vector_3_type.ts";
export { DbVector3 };
import { Player } from "./player_type.ts";
export { Player };
import { UpdatePlayerTimer } from "./update_player_timer_type.ts";
export { UpdatePlayerTimer };
import { WorldConfig } from "./world_config_type.ts";
export { WorldConfig };
import { MicroprocessCode } from "./microprocess_code_type.ts";
export { MicroprocessCode };
import { MicroprocessState } from "./microprocess_state_type.ts";
export { MicroprocessState };

const REMOTE_MODULE = {
  tables: {
    logged_out_player: {
      tableName: "logged_out_player",
      rowType: Player.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
    },
    player: {
      tableName: "player",
      rowType: Player.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
    },
    update_player_timer: {
      tableName: "update_player_timer",
      rowType: UpdatePlayerTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
    },
    world_config: {
      tableName: "world_config",
      rowType: WorldConfig.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    microprocess_code: {
      tableName: "microprocess_code",
      rowType: MicroprocessCode.getTypeScriptAlgebraicType(),
      primaryKey: "code_id",
    },
    microprocess_state: {
      tableName: "microprocess_state",
      rowType: MicroprocessState.getTypeScriptAlgebraicType(),
      primaryKey: "state_id",
    },
  },
  reducers: {
    connect: {
      reducerName: "connect",
      argsType: Connect.getTypeScriptAlgebraicType(),
    },
    disconnect: {
      reducerName: "disconnect",
      argsType: Disconnect.getTypeScriptAlgebraicType(),
    },
    register_player: {
      reducerName: "register_player",
      argsType: RegisterPlayer.getTypeScriptAlgebraicType(),
    },
    update_player_position: {
      reducerName: "update_player_position",
      argsType: UpdatePlayerPosition.getTypeScriptAlgebraicType(),
    },
    update_player_positions: {
      reducerName: "update_player_positions",
      argsType: UpdatePlayerPositions.getTypeScriptAlgebraicType(),
    },
    save_microprocess_code: {
      reducerName: "save_microprocess_code",
      argsType: SaveMicroprocessCode.getTypeScriptAlgebraicType(),
    },
    start_microprocess: {
      reducerName: "start_microprocess",
      argsType: StartMicroprocess.getTypeScriptAlgebraicType(),
    },
    stop_microprocess: {
      reducerName: "stop_microprocess",
      argsType: StopMicroprocess.getTypeScriptAlgebraicType(),
    },
    update_microprocess_state: {
      reducerName: "update_microprocess_state",
      argsType: UpdateMicroprocessState.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "Connect", args: Connect }
| { name: "Disconnect", args: Disconnect }
| { name: "RegisterPlayer", args: RegisterPlayer }
| { name: "UpdatePlayerPosition", args: UpdatePlayerPosition }
| { name: "UpdatePlayerPositions", args: UpdatePlayerPositions }
| { name: "SaveMicroprocessCode", args: SaveMicroprocessCode }
| { name: "StartMicroprocess", args: StartMicroprocess }
| { name: "StopMicroprocess", args: StopMicroprocess }
| { name: "UpdateMicroprocessState", args: UpdateMicroprocessState }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  onConnect(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("connect", callback);
  }

  removeOnConnect(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("connect", callback);
  }

  onDisconnect(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("disconnect", callback);
  }

  removeOnDisconnect(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("disconnect", callback);
  }

  registerPlayer(name: string, position: DbVector3, rotation: DbVector3) {
    const __args = { name, position, rotation };
    let __writer = new BinaryWriter(1024);
    RegisterPlayer.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("register_player", __argsBuffer, this.setCallReducerFlags.registerPlayerFlags);
  }

  onRegisterPlayer(callback: (ctx: ReducerEventContext, name: string, position: DbVector3, rotation: DbVector3) => void) {
    this.connection.onReducer("register_player", callback);
  }

  removeOnRegisterPlayer(callback: (ctx: ReducerEventContext, name: string, position: DbVector3, rotation: DbVector3) => void) {
    this.connection.offReducer("register_player", callback);
  }

  updatePlayerPosition(position: DbVector3, rotation: DbVector3) {
    const __args = { position, rotation };
    let __writer = new BinaryWriter(1024);
    UpdatePlayerPosition.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("update_player_position", __argsBuffer, this.setCallReducerFlags.updatePlayerPositionFlags);
  }

  onUpdatePlayerPosition(callback: (ctx: ReducerEventContext, position: DbVector3, rotation: DbVector3) => void) {
    this.connection.onReducer("update_player_position", callback);
  }

  removeOnUpdatePlayerPosition(callback: (ctx: ReducerEventContext, position: DbVector3, rotation: DbVector3) => void) {
    this.connection.offReducer("update_player_position", callback);
  }

  updatePlayerPositions(timer: UpdatePlayerTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    UpdatePlayerPositions.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("update_player_positions", __argsBuffer, this.setCallReducerFlags.updatePlayerPositionsFlags);
  }

  onUpdatePlayerPositions(callback: (ctx: ReducerEventContext, timer: UpdatePlayerTimer) => void) {
    this.connection.onReducer("update_player_positions", callback);
  }

  removeOnUpdatePlayerPositions(callback: (ctx: ReducerEventContext, timer: UpdatePlayerTimer) => void) {
    this.connection.offReducer("update_player_positions", callback);
  }

  saveMicroprocessCode(name: string, file_path: string, code_content: string) {
    const __args = { name, file_path, code_content };
    let __writer = new BinaryWriter(1024);
    SaveMicroprocessCode.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("save_microprocess_code", __argsBuffer, this.setCallReducerFlags.saveMicroprocessCodeFlags);
  }

  onSaveMicroprocessCode(callback: (ctx: ReducerEventContext, name: string, file_path: string, code_content: string) => void) {
    this.connection.onReducer("save_microprocess_code", callback);
  }

  removeOnSaveMicroprocessCode(callback: (ctx: ReducerEventContext, name: string, file_path: string, code_content: string) => void) {
    this.connection.offReducer("save_microprocess_code", callback);
  }

  startMicroprocess(code_id: number) {
    const __args = { code_id };
    let __writer = new BinaryWriter(1024);
    StartMicroprocess.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("start_microprocess", __argsBuffer, this.setCallReducerFlags.startMicroprocessFlags);
  }

  onStartMicroprocess(callback: (ctx: ReducerEventContext, code_id: number) => void) {
    this.connection.onReducer("start_microprocess", callback);
  }

  removeOnStartMicroprocess(callback: (ctx: ReducerEventContext, code_id: number) => void) {
    this.connection.offReducer("start_microprocess", callback);
  }

  stopMicroprocess(code_id: number) {
    const __args = { code_id };
    let __writer = new BinaryWriter(1024);
    StopMicroprocess.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stop_microprocess", __argsBuffer, this.setCallReducerFlags.stopMicroprocessFlags);
  }

  onStopMicroprocess(callback: (ctx: ReducerEventContext, code_id: number) => void) {
    this.connection.onReducer("stop_microprocess", callback);
  }

  removeOnStopMicroprocess(callback: (ctx: ReducerEventContext, code_id: number) => void) {
    this.connection.offReducer("stop_microprocess", callback);
  }

  updateMicroprocessState(code_id: number, left_motor_speed: number, right_motor_speed: number, error_message: string, is_running: boolean) {
    const __args = { code_id, left_motor_speed, right_motor_speed, error_message, is_running };
    let __writer = new BinaryWriter(1024);
    UpdateMicroprocessState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("update_microprocess_state", __argsBuffer, this.setCallReducerFlags.updateMicroprocessStateFlags);
  }

  onUpdateMicroprocessState(callback: (ctx: ReducerEventContext, code_id: number, left_motor_speed: number, right_motor_speed: number, error_message: string, is_running: boolean) => void) {
    this.connection.onReducer("update_microprocess_state", callback);
  }

  removeOnUpdateMicroprocessState(callback: (ctx: ReducerEventContext, code_id: number, left_motor_speed: number, right_motor_speed: number, error_message: string, is_running: boolean) => void) {
    this.connection.offReducer("update_microprocess_state", callback);
  }

}

export class SetReducerFlags {
  registerPlayerFlags: CallReducerFlags = 'FullUpdate';
  registerPlayer(flags: CallReducerFlags) {
    this.registerPlayerFlags = flags;
  }

  updatePlayerPositionFlags: CallReducerFlags = 'FullUpdate';
  updatePlayerPosition(flags: CallReducerFlags) {
    this.updatePlayerPositionFlags = flags;
  }

  updatePlayerPositionsFlags: CallReducerFlags = 'FullUpdate';
  updatePlayerPositions(flags: CallReducerFlags) {
    this.updatePlayerPositionsFlags = flags;
  }

  saveMicroprocessCodeFlags: CallReducerFlags = 'FullUpdate';
  saveMicroprocessCode(flags: CallReducerFlags) {
    this.saveMicroprocessCodeFlags = flags;
  }

  startMicroprocessFlags: CallReducerFlags = 'FullUpdate';
  startMicroprocess(flags: CallReducerFlags) {
    this.startMicroprocessFlags = flags;
  }

  stopMicroprocessFlags: CallReducerFlags = 'FullUpdate';
  stopMicroprocess(flags: CallReducerFlags) {
    this.stopMicroprocessFlags = flags;
  }

  updateMicroprocessStateFlags: CallReducerFlags = 'FullUpdate';
  updateMicroprocessState(flags: CallReducerFlags) {
    this.updateMicroprocessStateFlags = flags;
  }
}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get loggedOutPlayer(): LoggedOutPlayerTableHandle {
    return new LoggedOutPlayerTableHandle(this.connection.clientCache.getOrCreateTable<Player>(REMOTE_MODULE.tables.logged_out_player));
  }

  get player(): PlayerTableHandle {
    return new PlayerTableHandle(this.connection.clientCache.getOrCreateTable<Player>(REMOTE_MODULE.tables.player));
  }

  get updatePlayerTimer(): UpdatePlayerTimerTableHandle {
    return new UpdatePlayerTimerTableHandle(this.connection.clientCache.getOrCreateTable<UpdatePlayerTimer>(REMOTE_MODULE.tables.update_player_timer));
  }

  get worldConfig(): WorldConfigTableHandle {
    return new WorldConfigTableHandle(this.connection.clientCache.getOrCreateTable<WorldConfig>(REMOTE_MODULE.tables.world_config));
  }

  get microprocessCode(): MicroprocessCodeTableHandle {
    return new MicroprocessCodeTableHandle(this.connection.clientCache.getOrCreateTable<MicroprocessCode>(REMOTE_MODULE.tables.microprocess_code));
  }

  get microprocessState(): MicroprocessStateTableHandle {
    return new MicroprocessStateTableHandle(this.connection.clientCache.getOrCreateTable<MicroprocessState>(REMOTE_MODULE.tables.microprocess_state));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
