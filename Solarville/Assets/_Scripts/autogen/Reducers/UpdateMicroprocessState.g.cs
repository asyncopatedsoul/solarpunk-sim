// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#nullable enable

using System;
using SpacetimeDB.ClientApi;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace SpacetimeDB.Types
{
    public sealed partial class RemoteReducers : RemoteBase
    {
        public delegate void UpdateMicroprocessStateHandler(ReducerEventContext ctx, uint codeId, float leftMotorSpeed, float rightMotorSpeed, string errorMessage, bool isRunning);
        public event UpdateMicroprocessStateHandler? OnUpdateMicroprocessState;

        public void UpdateMicroprocessState(uint codeId, float leftMotorSpeed, float rightMotorSpeed, string errorMessage, bool isRunning)
        {
            conn.InternalCallReducer(new Reducer.UpdateMicroprocessState(codeId, leftMotorSpeed, rightMotorSpeed, errorMessage, isRunning), this.SetCallReducerFlags.UpdateMicroprocessStateFlags);
        }

        public bool InvokeUpdateMicroprocessState(ReducerEventContext ctx, Reducer.UpdateMicroprocessState args)
        {
            if (OnUpdateMicroprocessState == null) return false;
            OnUpdateMicroprocessState(
                ctx,
                args.CodeId,
                args.LeftMotorSpeed,
                args.RightMotorSpeed,
                args.ErrorMessage,
                args.IsRunning
            );
            return true;
        }
    }

    public abstract partial class Reducer
    {
        [SpacetimeDB.Type]
        [DataContract]
        public sealed partial class UpdateMicroprocessState : Reducer, IReducerArgs
        {
            [DataMember(Name = "code_id")]
            public uint CodeId;
            [DataMember(Name = "left_motor_speed")]
            public float LeftMotorSpeed;
            [DataMember(Name = "right_motor_speed")]
            public float RightMotorSpeed;
            [DataMember(Name = "error_message")]
            public string ErrorMessage;
            [DataMember(Name = "is_running")]
            public bool IsRunning;

            public UpdateMicroprocessState(
                uint CodeId,
                float LeftMotorSpeed,
                float RightMotorSpeed,
                string ErrorMessage,
                bool IsRunning
            )
            {
                this.CodeId = CodeId;
                this.LeftMotorSpeed = LeftMotorSpeed;
                this.RightMotorSpeed = RightMotorSpeed;
                this.ErrorMessage = ErrorMessage;
                this.IsRunning = IsRunning;
            }

            public UpdateMicroprocessState()
            {
                this.ErrorMessage = "";
            }

            string IReducerArgs.ReducerName => "update_microprocess_state";
        }
    }

    public sealed partial class SetReducerFlags
    {
        internal CallReducerFlags UpdateMicroprocessStateFlags;
        public void UpdateMicroprocessState(CallReducerFlags flags) => UpdateMicroprocessStateFlags = flags;
    }
}
